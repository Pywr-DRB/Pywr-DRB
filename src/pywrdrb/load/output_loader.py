"""
Used to load simulation results from pywrdrb output files.

Overview:
This module defines the Output class which provides functionality for loading
simulation output data from HDF5 files generated by pywrdrb model runs.
This class is built on top of the AbstractDataLoader class such that it has the same
data structure as the other data loaders (e.g. Observations) and is used in the 
general pywrdrb.Data() class for Data().load_output().

Technical Notes:
- Handles loading multiple output files with multiple scenarios
- Requires specification of results_set options 
- #TODO:
    - Add {output_file : label} mapping, such that the stored output label can be changed instead of the file name.

Links:
- See results_set options in the docs: https://pywr-drb.github.io/Pywr-DRB/results_set_options.html

Change Log:
TJA, 2025-05-02, Added consistent docstrings.
"""

import numpy as np

from pywrdrb.load.abstract_loader import AbstractDataLoader, default_kwargs
from pywrdrb.load.get_results import get_pywrdrb_results
from pywrdrb.utils.results_sets import pywrdrb_results_set_opts
from pywrdrb.utils.directories import output_dir
from pywrdrb.utils.hdf5 import get_n_scenarios_from_pywrdrb_output_file


class Output(AbstractDataLoader):
    """
    Loader for simulation output data from pywrdrb.
    
    Loads data from HDF5 output files and organizes it by results_set and scenario.
    
    Methods
    -------
    load(output_filenames, **kwargs)
        Load data for the specified output files and results_sets.
    
    Attributes
    ----------
    pn : PathNavigator
        Path navigator object for directory management. Default is the global pn.
    output_filenames_with_filetype : list
        List of output files with their file extensions.
    output_labels_and_files : dict
        Dictionary mapping output labels to filenames.
    output_labels : list
        List of output labels extracted from filenames.
    """
    def __init__(self, 
                 output_filenames, 
                 **kwargs):
        """
        Initialize the Output loader with filenames and other options.

        Parameters
        ----------
        output_filenames : list
            List of output files to load. Files can include or exclude file extensions.
        results_sets : list, optional
            Results sets to load.
        units : str, optional
            Units for the results (default 'MG').
        pn : PathNavigator, optional
            PathNavigator object with defined directories. Default is global pn.
        print_status : bool, optional
            Whether to print status updates (default False).
        """
        # Save output filenames with and without filetype
        self.output_filenames_with_filetype = []
        self.output_labels_and_files = {}
        for f in output_filenames:
            if "." in f:
                self.output_filenames_with_filetype.append(f)
            else:
                self.output_filenames_with_filetype.append(f"{f}.hdf5")

            self.output_labels_and_files[self.__get_output_label_from_filename__(f)] = f
        self.output_labels = list(self.output_labels_and_files.keys())
        
        self.valid_results_set_opts = pywrdrb_results_set_opts
        
        self.default_kwargs = default_kwargs
        super().__parse_kwargs__(self.default_kwargs, 
                              **kwargs)



    def __get_output_label_from_filename__(self, filename):
        """
        Extract a label from a full filename.
        
        The label is the stripped down filename 
        without the path or file extension. This label is used
        in the hierarchical data structure to store the results.
        
        Parameters
        ----------
        filename : str
            Full path of the filename.

        Returns
        -------
        str
        
        Notes
        -----
        (TJA) This should probably be more robust.
        """
        if "/" in filename:
            filename = filename.split("/")[-1]
        elif "\\" in filename:
            filename = filename.split("\\")[-1]
        
        if "." in filename:
            filename = filename.split(".")[0]
        
        return filename
            
        
    def __get_scenario_ids_for_output_filenames__(self):
        """
        Get the scenario indices for each output file.
        
        Stores a dictionary of scenario indices for each output file,
        where the keys are the output labels and the values are numpy arrays
        of scenario indices. The scenario indices are obtained from the
        pywrdrb output files using the `get_n_scenarios_from_pywrdrb_output_file` function.
        
        Returns
        -------
        None
        """
        self.scenarios = {
            label: np.arange(get_n_scenarios_from_pywrdrb_output_file(file))
            for label, file in self.output_labels_and_files.items()
        }

    def load(self, **kwargs):
        """
        Load output data based on filenames and results sets.
        
        Loads the data from the output files for the specified results sets and
        stores them as attributes of the Output object.

        Parameters
        ----------
        results_sets : list, optional
            Results sets to load.
        print_status : bool, optional
            Whether to print status updates.

        Returns
        -------
        None
        """

        super().__parse_kwargs__(default_kwargs=self.default_kwargs,
                              **kwargs)

        super().__validate_results_sets__(valid_results_set_opts=self.valid_results_set_opts)

        super().__verify_files_exist__(files=self.output_filenames_with_filetype)

        self.__get_scenario_ids_for_output_filenames__()

        # Load the results
        all_results_data = {}

        datetime = None
        for s in self.results_sets:
            all_results_data[s] = {}
            
            for label, file in self.output_labels_and_files.items():
                if self.print_status:
                    print(f"Loading {s} data from {label}")


                all_results_data[s][label], datetime = get_pywrdrb_results(
                    output_filename=file,
                    results_set=s,
                    scenarios=self.scenarios[label],
                    datetime_index=datetime,
                    units=self.units,
                )
            
            super().set_data(data = all_results_data[s],
                             name = s)
