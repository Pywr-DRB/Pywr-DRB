### github actions to build & deploy book, following https://github.com/executablebooks/cookiecutter-jupyter-book/blob/main/.github/workflows/deploy.yml

name: deploy

on:
  push:
    branches:
      - master
  schedule:
    # jupyter-book is updated regularly, let's run this deployment every month in case something fails
    # <minute [0,59]> <hour [0,23]> <day of the month [1,31]> <month of the year [1,12]> <day of the week [0,6]>
    # https://pubs.opengroup.org/onlinepubs/9699919799/utilities/crontab.html#tag_20_25_07
    # https://crontab.guru/every-month
    # Run cron job every month
    - cron: '0 0 1 * *'

jobs:
  # This job deploys the example book
  deploy-example-book:
    if: contains(github.event.head_commit.message, '[build]')
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        python-version: [3.8]
    steps:
    - uses: actions/checkout@v2
    
    
    # - name: Clear Build Cache
    #   run: rm -rf docs/_build

    # Install python
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python-version }}

    # install virtual environment with caching, so only updates when requirements.txt changes,
    # based on https://github.com/marketplace/actions/restore-or-create-a-python-virtualenv#custom_virtualenv_dir
    # Note: virtual environment by default will be created under ~/venv
    - uses: syphar/restore-virtualenv@v1
      id: cache-virtualenv
      with:
        requirement_files: docs/requirements.txt
    - uses: syphar/restore-pip-download-cache@v1
      if: steps.cache-virtualenv.outputs.cache-hit != 'true'

    # install python dependencies
    - name: Install python dependencies
      run: pip install -r docs/requirements.txt
      if: steps.cache-virtualenv.outputs.cache-hit != 'true'

    # Print current directory
    - name: Print Current Directory
      run: |
            echo "Current directory:"
            pwd
            echo "Listing contents:"
            ls -al

    # Build the example book
    - name: Build book
      run: |
              #jupyter-book build --all docs/
              ### first use jupyter-books to build sphinx config file
              jupyter-book config sphinx docs/

              # Now manually fix path in config file to include the base dir outside docs, so we can import pywrdrb
              echo "Appending sys.path modification to conf.py"
              echo -e "import sys\nimport os\nsys.path.insert(0, os.path.abspath('../'))\nsys.path.insert(0, os.path.abspath('./pywrdrb/'))" >> docs/conf.py

              # Print contents of modified config file
              echo "Contents of conf.py:"
              cat docs/conf.py

              ### now manually fix path in config file to include the base dir outside docs, so we can import pywrdrb
              ## sed -i '1s:^:import sys\nimport os\nsys.path.insert(0, os.path.abspath("../"))\nsys.path.insert(0, os.path.abspath("../pywrdrb/"))\n:' docs/conf.py
              
              ### now build jupyter book directly from altered sphinx config file
              sphinx-build docs/ docs/_build/html -b html

    # Generate folium map and copy file to _build
    - name: copy map
      uses: canastro/copy-file-action@master
      with:
        source: "docs/drb_model_map.html"
        target: "docs/_build/html/drb_model_map.html"

    # Copy images to build
    - name: copy images
      uses: canastro/copy-file-action@master
      with:
        source: docs/images/.
        target: docs/_build/html/_images/
        flags: '-r'

    # Deploy html to gh-pages
    - name: GitHub Pages action
      uses: peaceiris/actions-gh-pages@v3.6.1
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: docs/_build/html
        publish_branch: gh-pages
